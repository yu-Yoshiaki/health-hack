/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/messagetemplatecontent": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messagetemplatecontent.id"];
          inserted_at?: parameters["rowFilter.messagetemplatecontent.inserted_at"];
          updated_at?: parameters["rowFilter.messagetemplatecontent.updated_at"];
          istype?: parameters["rowFilter.messagetemplatecontent.istype"];
          istext?: parameters["rowFilter.messagetemplatecontent.istext"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["messagetemplatecontent"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** messagetemplatecontent */
          messagetemplatecontent?: definitions["messagetemplatecontent"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messagetemplatecontent.id"];
          inserted_at?: parameters["rowFilter.messagetemplatecontent.inserted_at"];
          updated_at?: parameters["rowFilter.messagetemplatecontent.updated_at"];
          istype?: parameters["rowFilter.messagetemplatecontent.istype"];
          istext?: parameters["rowFilter.messagetemplatecontent.istext"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messagetemplatecontent.id"];
          inserted_at?: parameters["rowFilter.messagetemplatecontent.inserted_at"];
          updated_at?: parameters["rowFilter.messagetemplatecontent.updated_at"];
          istype?: parameters["rowFilter.messagetemplatecontent.istype"];
          istext?: parameters["rowFilter.messagetemplatecontent.istext"];
        };
        body: {
          /** messagetemplatecontent */
          messagetemplatecontent?: definitions["messagetemplatecontent"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/talks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          insertedAt?: parameters["rowFilter.talks.insertedAt"];
          updatedAt?: parameters["rowFilter.talks.updatedAt"];
          isType?: parameters["rowFilter.talks.isType"];
          messageType?: parameters["rowFilter.talks.messageType"];
          messageId?: parameters["rowFilter.talks.messageId"];
          messageText?: parameters["rowFilter.talks.messageText"];
          webhookEventid?: parameters["rowFilter.talks.webhookEventid"];
          isRedelivery?: parameters["rowFilter.talks.isRedelivery"];
          isTimestamp?: parameters["rowFilter.talks.isTimestamp"];
          replyToken?: parameters["rowFilter.talks.replyToken"];
          isMode?: parameters["rowFilter.talks.isMode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["talks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** talks */
          talks?: definitions["talks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          insertedAt?: parameters["rowFilter.talks.insertedAt"];
          updatedAt?: parameters["rowFilter.talks.updatedAt"];
          isType?: parameters["rowFilter.talks.isType"];
          messageType?: parameters["rowFilter.talks.messageType"];
          messageId?: parameters["rowFilter.talks.messageId"];
          messageText?: parameters["rowFilter.talks.messageText"];
          webhookEventid?: parameters["rowFilter.talks.webhookEventid"];
          isRedelivery?: parameters["rowFilter.talks.isRedelivery"];
          isTimestamp?: parameters["rowFilter.talks.isTimestamp"];
          replyToken?: parameters["rowFilter.talks.replyToken"];
          isMode?: parameters["rowFilter.talks.isMode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          insertedAt?: parameters["rowFilter.talks.insertedAt"];
          updatedAt?: parameters["rowFilter.talks.updatedAt"];
          isType?: parameters["rowFilter.talks.isType"];
          messageType?: parameters["rowFilter.talks.messageType"];
          messageId?: parameters["rowFilter.talks.messageId"];
          messageText?: parameters["rowFilter.talks.messageText"];
          webhookEventid?: parameters["rowFilter.talks.webhookEventid"];
          isRedelivery?: parameters["rowFilter.talks.isRedelivery"];
          isTimestamp?: parameters["rowFilter.talks.isTimestamp"];
          replyToken?: parameters["rowFilter.talks.replyToken"];
          isMode?: parameters["rowFilter.talks.isMode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
        };
        body: {
          /** talks */
          talks?: definitions["talks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/reserve": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reserve.created_at"];
          date?: parameters["rowFilter.reserve.date"];
          member?: parameters["rowFilter.reserve.member"];
          status?: parameters["rowFilter.reserve.status"];
          lineid?: parameters["rowFilter.reserve.lineid"];
          reserveid?: parameters["rowFilter.reserve.reserveid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["reserve"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** reserve */
          reserve?: definitions["reserve"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reserve.created_at"];
          date?: parameters["rowFilter.reserve.date"];
          member?: parameters["rowFilter.reserve.member"];
          status?: parameters["rowFilter.reserve.status"];
          lineid?: parameters["rowFilter.reserve.lineid"];
          reserveid?: parameters["rowFilter.reserve.reserveid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reserve.created_at"];
          date?: parameters["rowFilter.reserve.date"];
          member?: parameters["rowFilter.reserve.member"];
          status?: parameters["rowFilter.reserve.status"];
          lineid?: parameters["rowFilter.reserve.lineid"];
          reserveid?: parameters["rowFilter.reserve.reserveid"];
        };
        body: {
          /** reserve */
          reserve?: definitions["reserve"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/messagetemplate": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messagetemplate.id"];
          inserted_at?: parameters["rowFilter.messagetemplate.inserted_at"];
          updated_at?: parameters["rowFilter.messagetemplate.updated_at"];
          content?: parameters["rowFilter.messagetemplate.content"];
          name?: parameters["rowFilter.messagetemplate.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["messagetemplate"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** messagetemplate */
          messagetemplate?: definitions["messagetemplate"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messagetemplate.id"];
          inserted_at?: parameters["rowFilter.messagetemplate.inserted_at"];
          updated_at?: parameters["rowFilter.messagetemplate.updated_at"];
          content?: parameters["rowFilter.messagetemplate.content"];
          name?: parameters["rowFilter.messagetemplate.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messagetemplate.id"];
          inserted_at?: parameters["rowFilter.messagetemplate.inserted_at"];
          updated_at?: parameters["rowFilter.messagetemplate.updated_at"];
          content?: parameters["rowFilter.messagetemplate.content"];
          name?: parameters["rowFilter.messagetemplate.name"];
        };
        body: {
          /** messagetemplate */
          messagetemplate?: definitions["messagetemplate"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/urls_tags": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_tags.id"];
          createdAt?: parameters["rowFilter.urls_tags.createdAt"];
          urlId?: parameters["rowFilter.urls_tags.urlId"];
          tagId?: parameters["rowFilter.urls_tags.tagId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["urls_tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** urls_tags */
          urls_tags?: definitions["urls_tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_tags.id"];
          createdAt?: parameters["rowFilter.urls_tags.createdAt"];
          urlId?: parameters["rowFilter.urls_tags.urlId"];
          tagId?: parameters["rowFilter.urls_tags.tagId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_tags.id"];
          createdAt?: parameters["rowFilter.urls_tags.createdAt"];
          urlId?: parameters["rowFilter.urls_tags.urlId"];
          tagId?: parameters["rowFilter.urls_tags.tagId"];
        };
        body: {
          /** urls_tags */
          urls_tags?: definitions["urls_tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/autoreplymessage": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.autoreplymessage.id"];
          inserted_at?: parameters["rowFilter.autoreplymessage.inserted_at"];
          updated_at?: parameters["rowFilter.autoreplymessage.updated_at"];
          trigger?: parameters["rowFilter.autoreplymessage.trigger"];
          content?: parameters["rowFilter.autoreplymessage.content"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["autoreplymessage"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** autoreplymessage */
          autoreplymessage?: definitions["autoreplymessage"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.autoreplymessage.id"];
          inserted_at?: parameters["rowFilter.autoreplymessage.inserted_at"];
          updated_at?: parameters["rowFilter.autoreplymessage.updated_at"];
          trigger?: parameters["rowFilter.autoreplymessage.trigger"];
          content?: parameters["rowFilter.autoreplymessage.content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.autoreplymessage.id"];
          inserted_at?: parameters["rowFilter.autoreplymessage.inserted_at"];
          updated_at?: parameters["rowFilter.autoreplymessage.updated_at"];
          trigger?: parameters["rowFilter.autoreplymessage.trigger"];
          content?: parameters["rowFilter.autoreplymessage.content"];
        };
        body: {
          /** autoreplymessage */
          autoreplymessage?: definitions["autoreplymessage"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/countup": {
    get: {
      parameters: {
        query: {
          url?: parameters["rowFilter.countup.url"];
          count?: parameters["rowFilter.countup.count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["countup"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** countup */
          countup?: definitions["countup"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          url?: parameters["rowFilter.countup.url"];
          count?: parameters["rowFilter.countup.count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          url?: parameters["rowFilter.countup.url"];
          count?: parameters["rowFilter.countup.count"];
        };
        body: {
          /** countup */
          countup?: definitions["countup"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pushmessages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          insertedAt?: parameters["rowFilter.pushmessages.insertedAt"];
          updatedAt?: parameters["rowFilter.pushmessages.updatedAt"];
          message?: parameters["rowFilter.pushmessages.message"];
          toUser?: parameters["rowFilter.pushmessages.toUser"];
          isType?: parameters["rowFilter.pushmessages.isType"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pushmessages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pushmessages */
          pushmessages?: definitions["pushmessages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          insertedAt?: parameters["rowFilter.pushmessages.insertedAt"];
          updatedAt?: parameters["rowFilter.pushmessages.updatedAt"];
          message?: parameters["rowFilter.pushmessages.message"];
          toUser?: parameters["rowFilter.pushmessages.toUser"];
          isType?: parameters["rowFilter.pushmessages.isType"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          insertedAt?: parameters["rowFilter.pushmessages.insertedAt"];
          updatedAt?: parameters["rowFilter.pushmessages.updatedAt"];
          message?: parameters["rowFilter.pushmessages.message"];
          toUser?: parameters["rowFilter.pushmessages.toUser"];
          isType?: parameters["rowFilter.pushmessages.isType"];
        };
        body: {
          /** pushmessages */
          pushmessages?: definitions["pushmessages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tags": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          insertedAt?: parameters["rowFilter.tags.insertedAt"];
          updatedAt?: parameters["rowFilter.tags.updatedAt"];
          name?: parameters["rowFilter.tags.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tags */
          tags?: definitions["tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          insertedAt?: parameters["rowFilter.tags.insertedAt"];
          updatedAt?: parameters["rowFilter.tags.updatedAt"];
          name?: parameters["rowFilter.tags.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          insertedAt?: parameters["rowFilter.tags.insertedAt"];
          updatedAt?: parameters["rowFilter.tags.updatedAt"];
          name?: parameters["rowFilter.tags.name"];
        };
        body: {
          /** tags */
          tags?: definitions["tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/customers": {
    get: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          insertedAt?: parameters["rowFilter.customers.insertedAt"];
          updatedAt?: parameters["rowFilter.customers.updatedAt"];
          username?: parameters["rowFilter.customers.username"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["customers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** customers */
          customers?: definitions["customers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          insertedAt?: parameters["rowFilter.customers.insertedAt"];
          updatedAt?: parameters["rowFilter.customers.updatedAt"];
          username?: parameters["rowFilter.customers.username"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          insertedAt?: parameters["rowFilter.customers.insertedAt"];
          updatedAt?: parameters["rowFilter.customers.updatedAt"];
          username?: parameters["rowFilter.customers.username"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
        };
        body: {
          /** customers */
          customers?: definitions["customers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/urls": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls.id"];
          name?: parameters["rowFilter.urls.name"];
          createdAt?: parameters["rowFilter.urls.createdAt"];
          updatedAt?: parameters["rowFilter.urls.updatedAt"];
          click?: parameters["rowFilter.urls.click"];
          impression?: parameters["rowFilter.urls.impression"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["urls"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** urls */
          urls?: definitions["urls"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls.id"];
          name?: parameters["rowFilter.urls.name"];
          createdAt?: parameters["rowFilter.urls.createdAt"];
          updatedAt?: parameters["rowFilter.urls.updatedAt"];
          click?: parameters["rowFilter.urls.click"];
          impression?: parameters["rowFilter.urls.impression"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls.id"];
          name?: parameters["rowFilter.urls.name"];
          createdAt?: parameters["rowFilter.urls.createdAt"];
          updatedAt?: parameters["rowFilter.urls.updatedAt"];
          click?: parameters["rowFilter.urls.click"];
          impression?: parameters["rowFilter.urls.impression"];
        };
        body: {
          /** urls */
          urls?: definitions["urls"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/customers_tags": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers_tags.id"];
          createdAt?: parameters["rowFilter.customers_tags.createdAt"];
          tagId?: parameters["rowFilter.customers_tags.tagId"];
          customerId?: parameters["rowFilter.customers_tags.customerId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["customers_tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** customers_tags */
          customers_tags?: definitions["customers_tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers_tags.id"];
          createdAt?: parameters["rowFilter.customers_tags.createdAt"];
          tagId?: parameters["rowFilter.customers_tags.tagId"];
          customerId?: parameters["rowFilter.customers_tags.customerId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers_tags.id"];
          createdAt?: parameters["rowFilter.customers_tags.createdAt"];
          tagId?: parameters["rowFilter.customers_tags.tagId"];
          customerId?: parameters["rowFilter.customers_tags.customerId"];
        };
        body: {
          /** customers_tags */
          customers_tags?: definitions["customers_tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  messagetemplatecontent: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: character varying */
    istype: string;
    /** Format: character varying */
    istext: string;
  };
  talks: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    insertedAt: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
    /** Format: character varying */
    isType?: string;
    /** Format: character varying */
    messageType?: string;
    /** Format: character varying */
    messageId?: string;
    /** Format: character varying */
    messageText?: string;
    /** Format: character varying */
    webhookEventid?: string;
    /** Format: boolean */
    isRedelivery?: boolean;
    /** Format: character varying */
    isTimestamp?: string;
    /** Format: character varying */
    replyToken?: string;
    /** Format: character varying */
    isMode?: string;
    /**
     * Format: boolean
     * @description このメッセージに対して、返信したかどうか
     * @default false
     */
    isReply: boolean;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    userId: string;
  };
  reserve: {
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: date */
    date: string;
    /** Format: integer */
    member: number;
    /** Format: text */
    status: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    lineid: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    reserveid: string;
  };
  messagetemplate: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: ARRAY */
    content: unknown[];
    /** Format: character varying */
    name: string;
  };
  urls_tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `urls.id`.<fk table='urls' column='id'/>
     */
    urlId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tags.id`.<fk table='tags' column='id'/>
     */
    tagId: string;
  };
  autoreplymessage: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: character varying */
    trigger: string;
    /** Format: ARRAY */
    content: unknown[];
  };
  countup: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    url: string;
    /** Format: integer */
    count?: number;
  };
  pushmessages: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    insertedAt: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
    /** Format: character varying */
    message?: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    toUser: string;
    /**
     * Format: character varying
     * @default pushmessage
     */
    isType: string;
  };
  tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    insertedAt: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
    /** Format: character varying */
    name: string;
  };
  customers: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    lineid: string;
    /** Format: character varying */
    phone?: string;
    /** Format: character varying */
    email?: string;
    /** Format: character varying */
    address?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    insertedAt?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt?: string;
    /** Format: character varying */
    username?: string;
    /** Format: character varying */
    displayname?: string;
    /** Format: text */
    pictureurl?: string;
    /**
     * Format: character varying
     * @default follow
     */
    status?: string;
  };
  urls: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    createdAt: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updatedAt: string;
    /**
     * Format: integer
     * @default 0
     */
    click?: number;
    /**
     * Format: integer
     * @default 0
     */
    impression?: number;
  };
  customers_tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tags.id`.<fk table='tags' column='id'/>
     */
    tagId: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    customerId: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description messagetemplatecontent */
  "body.messagetemplatecontent": definitions["messagetemplatecontent"];
  /** Format: uuid */
  "rowFilter.messagetemplatecontent.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.messagetemplatecontent.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.messagetemplatecontent.updated_at": string;
  /** Format: character varying */
  "rowFilter.messagetemplatecontent.istype": string;
  /** Format: character varying */
  "rowFilter.messagetemplatecontent.istext": string;
  /** @description talks */
  "body.talks": definitions["talks"];
  /** Format: uuid */
  "rowFilter.talks.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.talks.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.talks.updatedAt": string;
  /** Format: character varying */
  "rowFilter.talks.isType": string;
  /** Format: character varying */
  "rowFilter.talks.messageType": string;
  /** Format: character varying */
  "rowFilter.talks.messageId": string;
  /** Format: character varying */
  "rowFilter.talks.messageText": string;
  /** Format: character varying */
  "rowFilter.talks.webhookEventid": string;
  /** Format: boolean */
  "rowFilter.talks.isRedelivery": string;
  /** Format: character varying */
  "rowFilter.talks.isTimestamp": string;
  /** Format: character varying */
  "rowFilter.talks.replyToken": string;
  /** Format: character varying */
  "rowFilter.talks.isMode": string;
  /**
   * Format: boolean
   * @description このメッセージに対して、返信したかどうか
   */
  "rowFilter.talks.isReply": string;
  /** Format: character varying */
  "rowFilter.talks.userId": string;
  /** @description reserve */
  "body.reserve": definitions["reserve"];
  /** Format: timestamp with time zone */
  "rowFilter.reserve.created_at": string;
  /** Format: date */
  "rowFilter.reserve.date": string;
  /** Format: integer */
  "rowFilter.reserve.member": string;
  /** Format: text */
  "rowFilter.reserve.status": string;
  /** Format: character varying */
  "rowFilter.reserve.lineid": string;
  /** Format: uuid */
  "rowFilter.reserve.reserveid": string;
  /** @description messagetemplate */
  "body.messagetemplate": definitions["messagetemplate"];
  /** Format: uuid */
  "rowFilter.messagetemplate.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.messagetemplate.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.messagetemplate.updated_at": string;
  /** Format: ARRAY */
  "rowFilter.messagetemplate.content": string;
  /** Format: character varying */
  "rowFilter.messagetemplate.name": string;
  /** @description urls_tags */
  "body.urls_tags": definitions["urls_tags"];
  /** Format: uuid */
  "rowFilter.urls_tags.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.urls_tags.createdAt": string;
  /** Format: uuid */
  "rowFilter.urls_tags.urlId": string;
  /** Format: uuid */
  "rowFilter.urls_tags.tagId": string;
  /** @description autoreplymessage */
  "body.autoreplymessage": definitions["autoreplymessage"];
  /** Format: uuid */
  "rowFilter.autoreplymessage.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.autoreplymessage.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.autoreplymessage.updated_at": string;
  /** Format: character varying */
  "rowFilter.autoreplymessage.trigger": string;
  /** Format: ARRAY */
  "rowFilter.autoreplymessage.content": string;
  /** @description countup */
  "body.countup": definitions["countup"];
  /** Format: text */
  "rowFilter.countup.url": string;
  /** Format: integer */
  "rowFilter.countup.count": string;
  /** @description pushmessages */
  "body.pushmessages": definitions["pushmessages"];
  /** Format: uuid */
  "rowFilter.pushmessages.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.pushmessages.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.pushmessages.updatedAt": string;
  /** Format: character varying */
  "rowFilter.pushmessages.message": string;
  /** Format: character varying */
  "rowFilter.pushmessages.toUser": string;
  /** Format: character varying */
  "rowFilter.pushmessages.isType": string;
  /** @description tags */
  "body.tags": definitions["tags"];
  /** Format: uuid */
  "rowFilter.tags.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.tags.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.tags.updatedAt": string;
  /** Format: character varying */
  "rowFilter.tags.name": string;
  /** @description customers */
  "body.customers": definitions["customers"];
  /** Format: character varying */
  "rowFilter.customers.lineid": string;
  /** Format: character varying */
  "rowFilter.customers.phone": string;
  /** Format: character varying */
  "rowFilter.customers.email": string;
  /** Format: character varying */
  "rowFilter.customers.address": string;
  /** Format: timestamp with time zone */
  "rowFilter.customers.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.customers.updatedAt": string;
  /** Format: character varying */
  "rowFilter.customers.username": string;
  /** Format: character varying */
  "rowFilter.customers.displayname": string;
  /** Format: text */
  "rowFilter.customers.pictureurl": string;
  /** Format: character varying */
  "rowFilter.customers.status": string;
  /** @description urls */
  "body.urls": definitions["urls"];
  /** Format: uuid */
  "rowFilter.urls.id": string;
  /** Format: character varying */
  "rowFilter.urls.name": string;
  /** Format: timestamp with time zone */
  "rowFilter.urls.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.urls.updatedAt": string;
  /** Format: integer */
  "rowFilter.urls.click": string;
  /** Format: integer */
  "rowFilter.urls.impression": string;
  /** @description customers_tags */
  "body.customers_tags": definitions["customers_tags"];
  /** Format: uuid */
  "rowFilter.customers_tags.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.customers_tags.createdAt": string;
  /** Format: uuid */
  "rowFilter.customers_tags.tagId": string;
  /** Format: character varying */
  "rowFilter.customers_tags.customerId": string;
}

export interface operations {}

export interface external {}
