/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/talks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          inserted_at?: parameters["rowFilter.talks.inserted_at"];
          updated_at?: parameters["rowFilter.talks.updated_at"];
          istype?: parameters["rowFilter.talks.istype"];
          messagetype?: parameters["rowFilter.talks.messagetype"];
          messageid?: parameters["rowFilter.talks.messageid"];
          messagetext?: parameters["rowFilter.talks.messagetext"];
          webhookeventid?: parameters["rowFilter.talks.webhookeventid"];
          isredelivery?: parameters["rowFilter.talks.isredelivery"];
          istimestamp?: parameters["rowFilter.talks.istimestamp"];
          replytoken?: parameters["rowFilter.talks.replytoken"];
          ismode?: parameters["rowFilter.talks.ismode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["talks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** talks */
          talks?: definitions["talks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          inserted_at?: parameters["rowFilter.talks.inserted_at"];
          updated_at?: parameters["rowFilter.talks.updated_at"];
          istype?: parameters["rowFilter.talks.istype"];
          messagetype?: parameters["rowFilter.talks.messagetype"];
          messageid?: parameters["rowFilter.talks.messageid"];
          messagetext?: parameters["rowFilter.talks.messagetext"];
          webhookeventid?: parameters["rowFilter.talks.webhookeventid"];
          isredelivery?: parameters["rowFilter.talks.isredelivery"];
          istimestamp?: parameters["rowFilter.talks.istimestamp"];
          replytoken?: parameters["rowFilter.talks.replytoken"];
          ismode?: parameters["rowFilter.talks.ismode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          inserted_at?: parameters["rowFilter.talks.inserted_at"];
          updated_at?: parameters["rowFilter.talks.updated_at"];
          istype?: parameters["rowFilter.talks.istype"];
          messagetype?: parameters["rowFilter.talks.messagetype"];
          messageid?: parameters["rowFilter.talks.messageid"];
          messagetext?: parameters["rowFilter.talks.messagetext"];
          webhookeventid?: parameters["rowFilter.talks.webhookeventid"];
          isredelivery?: parameters["rowFilter.talks.isredelivery"];
          istimestamp?: parameters["rowFilter.talks.istimestamp"];
          replytoken?: parameters["rowFilter.talks.replytoken"];
          ismode?: parameters["rowFilter.talks.ismode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
        };
        body: {
          /** talks */
          talks?: definitions["talks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/reserve": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reserve.created_at"];
          date?: parameters["rowFilter.reserve.date"];
          member?: parameters["rowFilter.reserve.member"];
          status?: parameters["rowFilter.reserve.status"];
          lineid?: parameters["rowFilter.reserve.lineid"];
          reserveid?: parameters["rowFilter.reserve.reserveid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["reserve"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** reserve */
          reserve?: definitions["reserve"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reserve.created_at"];
          date?: parameters["rowFilter.reserve.date"];
          member?: parameters["rowFilter.reserve.member"];
          status?: parameters["rowFilter.reserve.status"];
          lineid?: parameters["rowFilter.reserve.lineid"];
          reserveid?: parameters["rowFilter.reserve.reserveid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reserve.created_at"];
          date?: parameters["rowFilter.reserve.date"];
          member?: parameters["rowFilter.reserve.member"];
          status?: parameters["rowFilter.reserve.status"];
          lineid?: parameters["rowFilter.reserve.lineid"];
          reserveid?: parameters["rowFilter.reserve.reserveid"];
        };
        body: {
          /** reserve */
          reserve?: definitions["reserve"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pushmessages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          inserted_at?: parameters["rowFilter.pushmessages.inserted_at"];
          updated_at?: parameters["rowFilter.pushmessages.updated_at"];
          message?: parameters["rowFilter.pushmessages.message"];
          touserid?: parameters["rowFilter.pushmessages.touserid"];
          istype?: parameters["rowFilter.pushmessages.istype"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pushmessages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pushmessages */
          pushmessages?: definitions["pushmessages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          inserted_at?: parameters["rowFilter.pushmessages.inserted_at"];
          updated_at?: parameters["rowFilter.pushmessages.updated_at"];
          message?: parameters["rowFilter.pushmessages.message"];
          touserid?: parameters["rowFilter.pushmessages.touserid"];
          istype?: parameters["rowFilter.pushmessages.istype"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          inserted_at?: parameters["rowFilter.pushmessages.inserted_at"];
          updated_at?: parameters["rowFilter.pushmessages.updated_at"];
          message?: parameters["rowFilter.pushmessages.message"];
          touserid?: parameters["rowFilter.pushmessages.touserid"];
          istype?: parameters["rowFilter.pushmessages.istype"];
        };
        body: {
          /** pushmessages */
          pushmessages?: definitions["pushmessages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/automessagekeyword": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.automessagekeyword.id"];
          exactmatchornot?: parameters["rowFilter.automessagekeyword.exactmatchornot"];
          isaction?: parameters["rowFilter.automessagekeyword.isaction"];
          inserted_at?: parameters["rowFilter.automessagekeyword.inserted_at"];
          updated_at?: parameters["rowFilter.automessagekeyword.updated_at"];
          keyword?: parameters["rowFilter.automessagekeyword.keyword"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["automessagekeyword"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** automessagekeyword */
          automessagekeyword?: definitions["automessagekeyword"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.automessagekeyword.id"];
          exactmatchornot?: parameters["rowFilter.automessagekeyword.exactmatchornot"];
          isaction?: parameters["rowFilter.automessagekeyword.isaction"];
          inserted_at?: parameters["rowFilter.automessagekeyword.inserted_at"];
          updated_at?: parameters["rowFilter.automessagekeyword.updated_at"];
          keyword?: parameters["rowFilter.automessagekeyword.keyword"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.automessagekeyword.id"];
          exactmatchornot?: parameters["rowFilter.automessagekeyword.exactmatchornot"];
          isaction?: parameters["rowFilter.automessagekeyword.isaction"];
          inserted_at?: parameters["rowFilter.automessagekeyword.inserted_at"];
          updated_at?: parameters["rowFilter.automessagekeyword.updated_at"];
          keyword?: parameters["rowFilter.automessagekeyword.keyword"];
        };
        body: {
          /** automessagekeyword */
          automessagekeyword?: definitions["automessagekeyword"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/customers": {
    get: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          inserted_at?: parameters["rowFilter.customers.inserted_at"];
          updated_at?: parameters["rowFilter.customers.updated_at"];
          username?: parameters["rowFilter.customers.username"];
          tag?: parameters["rowFilter.customers.tag"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["customers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** customers */
          customers?: definitions["customers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          inserted_at?: parameters["rowFilter.customers.inserted_at"];
          updated_at?: parameters["rowFilter.customers.updated_at"];
          username?: parameters["rowFilter.customers.username"];
          tag?: parameters["rowFilter.customers.tag"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          inserted_at?: parameters["rowFilter.customers.inserted_at"];
          updated_at?: parameters["rowFilter.customers.updated_at"];
          username?: parameters["rowFilter.customers.username"];
          tag?: parameters["rowFilter.customers.tag"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
        };
        body: {
          /** customers */
          customers?: definitions["customers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  talks: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: character varying */
    istype?: string;
    /** Format: character varying */
    messagetype?: string;
    /** Format: character varying */
    messageid?: string;
    /** Format: character varying */
    messagetext?: string;
    /** Format: character varying */
    webhookeventid?: string;
    /** Format: boolean */
    isredelivery?: boolean;
    /** Format: character varying */
    istimestamp?: string;
    /** Format: character varying */
    replytoken?: string;
    /** Format: character varying */
    ismode?: string;
    /**
     * Format: boolean
     * @description このメッセージに対して、返信したかどうか
     * @default false
     */
    isReply: boolean;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    userId: string;
  };
  reserve: {
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: date */
    date: string;
    /** Format: integer */
    member: number;
    /** Format: text */
    status: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    lineid: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    reserveid: string;
  };
  pushmessages: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: character varying */
    message?: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    touserid: string;
    /**
     * Format: character varying
     * @default pushmessage
     */
    istype: string;
  };
  automessagekeyword: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: boolean
     * @default false
     */
    exactmatchornot: boolean;
    /** Format: character varying */
    isaction?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone(''::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
    /** Format: character varying */
    keyword: string;
  };
  customers: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    lineid: string;
    /** Format: character varying */
    phone?: string;
    /** Format: character varying */
    email?: string;
    /** Format: character varying */
    address?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    inserted_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: character varying */
    username?: string;
    /** Format: ARRAY */
    tag?: unknown[];
    /** Format: character varying */
    displayname?: string;
    /** Format: character varying */
    pictureurl?: string;
    /**
     * Format: character varying
     * @default follow
     */
    status?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description talks */
  "body.talks": definitions["talks"];
  /** Format: uuid */
  "rowFilter.talks.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.talks.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.talks.updated_at": string;
  /** Format: character varying */
  "rowFilter.talks.istype": string;
  /** Format: character varying */
  "rowFilter.talks.messagetype": string;
  /** Format: character varying */
  "rowFilter.talks.messageid": string;
  /** Format: character varying */
  "rowFilter.talks.messagetext": string;
  /** Format: character varying */
  "rowFilter.talks.webhookeventid": string;
  /** Format: boolean */
  "rowFilter.talks.isredelivery": string;
  /** Format: character varying */
  "rowFilter.talks.istimestamp": string;
  /** Format: character varying */
  "rowFilter.talks.replytoken": string;
  /** Format: character varying */
  "rowFilter.talks.ismode": string;
  /**
   * Format: boolean
   * @description このメッセージに対して、返信したかどうか
   */
  "rowFilter.talks.isReply": string;
  /** Format: character varying */
  "rowFilter.talks.userId": string;
  /** @description reserve */
  "body.reserve": definitions["reserve"];
  /** Format: timestamp with time zone */
  "rowFilter.reserve.created_at": string;
  /** Format: date */
  "rowFilter.reserve.date": string;
  /** Format: integer */
  "rowFilter.reserve.member": string;
  /** Format: text */
  "rowFilter.reserve.status": string;
  /** Format: character varying */
  "rowFilter.reserve.lineid": string;
  /** Format: uuid */
  "rowFilter.reserve.reserveid": string;
  /** @description pushmessages */
  "body.pushmessages": definitions["pushmessages"];
  /** Format: uuid */
  "rowFilter.pushmessages.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.pushmessages.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.pushmessages.updated_at": string;
  /** Format: character varying */
  "rowFilter.pushmessages.message": string;
  /** Format: character varying */
  "rowFilter.pushmessages.touserid": string;
  /** Format: character varying */
  "rowFilter.pushmessages.istype": string;
  /** @description automessagekeyword */
  "body.automessagekeyword": definitions["automessagekeyword"];
  /** Format: uuid */
  "rowFilter.automessagekeyword.id": string;
  /** Format: boolean */
  "rowFilter.automessagekeyword.exactmatchornot": string;
  /** Format: character varying */
  "rowFilter.automessagekeyword.isaction": string;
  /** Format: timestamp with time zone */
  "rowFilter.automessagekeyword.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.automessagekeyword.updated_at": string;
  /** Format: character varying */
  "rowFilter.automessagekeyword.keyword": string;
  /** @description customers */
  "body.customers": definitions["customers"];
  /** Format: character varying */
  "rowFilter.customers.lineid": string;
  /** Format: character varying */
  "rowFilter.customers.phone": string;
  /** Format: character varying */
  "rowFilter.customers.email": string;
  /** Format: character varying */
  "rowFilter.customers.address": string;
  /** Format: timestamp with time zone */
  "rowFilter.customers.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.customers.updated_at": string;
  /** Format: character varying */
  "rowFilter.customers.username": string;
  /** Format: ARRAY */
  "rowFilter.customers.tag": string;
  /** Format: character varying */
  "rowFilter.customers.displayname": string;
  /** Format: character varying */
  "rowFilter.customers.pictureurl": string;
  /** Format: character varying */
  "rowFilter.customers.status": string;
}

export interface operations {}

export interface external {}
