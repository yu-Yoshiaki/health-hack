/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/talks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          insertedAt?: parameters["rowFilter.talks.insertedAt"];
          updatedAt?: parameters["rowFilter.talks.updatedAt"];
          isType?: parameters["rowFilter.talks.isType"];
          messageType?: parameters["rowFilter.talks.messageType"];
          messageId?: parameters["rowFilter.talks.messageId"];
          messageText?: parameters["rowFilter.talks.messageText"];
          webhookEventid?: parameters["rowFilter.talks.webhookEventid"];
          isRedelivery?: parameters["rowFilter.talks.isRedelivery"];
          isTimestamp?: parameters["rowFilter.talks.isTimestamp"];
          replyToken?: parameters["rowFilter.talks.replyToken"];
          isMode?: parameters["rowFilter.talks.isMode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["talks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** talks */
          talks?: definitions["talks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          insertedAt?: parameters["rowFilter.talks.insertedAt"];
          updatedAt?: parameters["rowFilter.talks.updatedAt"];
          isType?: parameters["rowFilter.talks.isType"];
          messageType?: parameters["rowFilter.talks.messageType"];
          messageId?: parameters["rowFilter.talks.messageId"];
          messageText?: parameters["rowFilter.talks.messageText"];
          webhookEventid?: parameters["rowFilter.talks.webhookEventid"];
          isRedelivery?: parameters["rowFilter.talks.isRedelivery"];
          isTimestamp?: parameters["rowFilter.talks.isTimestamp"];
          replyToken?: parameters["rowFilter.talks.replyToken"];
          isMode?: parameters["rowFilter.talks.isMode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.talks.id"];
          insertedAt?: parameters["rowFilter.talks.insertedAt"];
          updatedAt?: parameters["rowFilter.talks.updatedAt"];
          isType?: parameters["rowFilter.talks.isType"];
          messageType?: parameters["rowFilter.talks.messageType"];
          messageId?: parameters["rowFilter.talks.messageId"];
          messageText?: parameters["rowFilter.talks.messageText"];
          webhookEventid?: parameters["rowFilter.talks.webhookEventid"];
          isRedelivery?: parameters["rowFilter.talks.isRedelivery"];
          isTimestamp?: parameters["rowFilter.talks.isTimestamp"];
          replyToken?: parameters["rowFilter.talks.replyToken"];
          isMode?: parameters["rowFilter.talks.isMode"];
          /** このメッセージに対して、返信したかどうか */
          isReply?: parameters["rowFilter.talks.isReply"];
          userId?: parameters["rowFilter.talks.userId"];
        };
        body: {
          /** talks */
          talks?: definitions["talks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/OwnerInfomation": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.OwnerInfomation.id"];
          updatedAt?: parameters["rowFilter.OwnerInfomation.updatedAt"];
          createdAt?: parameters["rowFilter.OwnerInfomation.createdAt"];
          name?: parameters["rowFilter.OwnerInfomation.name"];
          apiChannelId?: parameters["rowFilter.OwnerInfomation.apiChannelId"];
          liffChannelSecret?: parameters["rowFilter.OwnerInfomation.liffChannelSecret"];
          webhookUrl?: parameters["rowFilter.OwnerInfomation.webhookUrl"];
          liffId?: parameters["rowFilter.OwnerInfomation.liffId"];
          liffChannelId?: parameters["rowFilter.OwnerInfomation.liffChannelId"];
          apiChannelSecret?: parameters["rowFilter.OwnerInfomation.apiChannelSecret"];
          apiChannelAccessToken?: parameters["rowFilter.OwnerInfomation.apiChannelAccessToken"];
          basicId?: parameters["rowFilter.OwnerInfomation.basicId"];
          pictureUrl?: parameters["rowFilter.OwnerInfomation.pictureUrl"];
          liffAccessToken?: parameters["rowFilter.OwnerInfomation.liffAccessToken"];
          firstLogin?: parameters["rowFilter.OwnerInfomation.firstLogin"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["OwnerInfomation"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** OwnerInfomation */
          OwnerInfomation?: definitions["OwnerInfomation"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.OwnerInfomation.id"];
          updatedAt?: parameters["rowFilter.OwnerInfomation.updatedAt"];
          createdAt?: parameters["rowFilter.OwnerInfomation.createdAt"];
          name?: parameters["rowFilter.OwnerInfomation.name"];
          apiChannelId?: parameters["rowFilter.OwnerInfomation.apiChannelId"];
          liffChannelSecret?: parameters["rowFilter.OwnerInfomation.liffChannelSecret"];
          webhookUrl?: parameters["rowFilter.OwnerInfomation.webhookUrl"];
          liffId?: parameters["rowFilter.OwnerInfomation.liffId"];
          liffChannelId?: parameters["rowFilter.OwnerInfomation.liffChannelId"];
          apiChannelSecret?: parameters["rowFilter.OwnerInfomation.apiChannelSecret"];
          apiChannelAccessToken?: parameters["rowFilter.OwnerInfomation.apiChannelAccessToken"];
          basicId?: parameters["rowFilter.OwnerInfomation.basicId"];
          pictureUrl?: parameters["rowFilter.OwnerInfomation.pictureUrl"];
          liffAccessToken?: parameters["rowFilter.OwnerInfomation.liffAccessToken"];
          firstLogin?: parameters["rowFilter.OwnerInfomation.firstLogin"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.OwnerInfomation.id"];
          updatedAt?: parameters["rowFilter.OwnerInfomation.updatedAt"];
          createdAt?: parameters["rowFilter.OwnerInfomation.createdAt"];
          name?: parameters["rowFilter.OwnerInfomation.name"];
          apiChannelId?: parameters["rowFilter.OwnerInfomation.apiChannelId"];
          liffChannelSecret?: parameters["rowFilter.OwnerInfomation.liffChannelSecret"];
          webhookUrl?: parameters["rowFilter.OwnerInfomation.webhookUrl"];
          liffId?: parameters["rowFilter.OwnerInfomation.liffId"];
          liffChannelId?: parameters["rowFilter.OwnerInfomation.liffChannelId"];
          apiChannelSecret?: parameters["rowFilter.OwnerInfomation.apiChannelSecret"];
          apiChannelAccessToken?: parameters["rowFilter.OwnerInfomation.apiChannelAccessToken"];
          basicId?: parameters["rowFilter.OwnerInfomation.basicId"];
          pictureUrl?: parameters["rowFilter.OwnerInfomation.pictureUrl"];
          liffAccessToken?: parameters["rowFilter.OwnerInfomation.liffAccessToken"];
          firstLogin?: parameters["rowFilter.OwnerInfomation.firstLogin"];
        };
        body: {
          /** OwnerInfomation */
          OwnerInfomation?: definitions["OwnerInfomation"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/urls_tags": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_tags.id"];
          createdAt?: parameters["rowFilter.urls_tags.createdAt"];
          urlId?: parameters["rowFilter.urls_tags.urlId"];
          tagId?: parameters["rowFilter.urls_tags.tagId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["urls_tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** urls_tags */
          urls_tags?: definitions["urls_tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_tags.id"];
          createdAt?: parameters["rowFilter.urls_tags.createdAt"];
          urlId?: parameters["rowFilter.urls_tags.urlId"];
          tagId?: parameters["rowFilter.urls_tags.tagId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_tags.id"];
          createdAt?: parameters["rowFilter.urls_tags.createdAt"];
          urlId?: parameters["rowFilter.urls_tags.urlId"];
          tagId?: parameters["rowFilter.urls_tags.tagId"];
        };
        body: {
          /** urls_tags */
          urls_tags?: definitions["urls_tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pushmessages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          insertedAt?: parameters["rowFilter.pushmessages.insertedAt"];
          updatedAt?: parameters["rowFilter.pushmessages.updatedAt"];
          message?: parameters["rowFilter.pushmessages.message"];
          toUser?: parameters["rowFilter.pushmessages.toUser"];
          isType?: parameters["rowFilter.pushmessages.isType"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pushmessages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pushmessages */
          pushmessages?: definitions["pushmessages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          insertedAt?: parameters["rowFilter.pushmessages.insertedAt"];
          updatedAt?: parameters["rowFilter.pushmessages.updatedAt"];
          message?: parameters["rowFilter.pushmessages.message"];
          toUser?: parameters["rowFilter.pushmessages.toUser"];
          isType?: parameters["rowFilter.pushmessages.isType"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pushmessages.id"];
          insertedAt?: parameters["rowFilter.pushmessages.insertedAt"];
          updatedAt?: parameters["rowFilter.pushmessages.updatedAt"];
          message?: parameters["rowFilter.pushmessages.message"];
          toUser?: parameters["rowFilter.pushmessages.toUser"];
          isType?: parameters["rowFilter.pushmessages.isType"];
        };
        body: {
          /** pushmessages */
          pushmessages?: definitions["pushmessages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tags": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          insertedAt?: parameters["rowFilter.tags.insertedAt"];
          updatedAt?: parameters["rowFilter.tags.updatedAt"];
          name?: parameters["rowFilter.tags.name"];
          owner?: parameters["rowFilter.tags.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tags */
          tags?: definitions["tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          insertedAt?: parameters["rowFilter.tags.insertedAt"];
          updatedAt?: parameters["rowFilter.tags.updatedAt"];
          name?: parameters["rowFilter.tags.name"];
          owner?: parameters["rowFilter.tags.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tags.id"];
          insertedAt?: parameters["rowFilter.tags.insertedAt"];
          updatedAt?: parameters["rowFilter.tags.updatedAt"];
          name?: parameters["rowFilter.tags.name"];
          owner?: parameters["rowFilter.tags.owner"];
        };
        body: {
          /** tags */
          tags?: definitions["tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/customers": {
    get: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          insertedAt?: parameters["rowFilter.customers.insertedAt"];
          updatedAt?: parameters["rowFilter.customers.updatedAt"];
          username?: parameters["rowFilter.customers.username"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
          owner?: parameters["rowFilter.customers.owner"];
          inflow?: parameters["rowFilter.customers.inflow"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["customers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** customers */
          customers?: definitions["customers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          insertedAt?: parameters["rowFilter.customers.insertedAt"];
          updatedAt?: parameters["rowFilter.customers.updatedAt"];
          username?: parameters["rowFilter.customers.username"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
          owner?: parameters["rowFilter.customers.owner"];
          inflow?: parameters["rowFilter.customers.inflow"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          lineid?: parameters["rowFilter.customers.lineid"];
          phone?: parameters["rowFilter.customers.phone"];
          email?: parameters["rowFilter.customers.email"];
          address?: parameters["rowFilter.customers.address"];
          insertedAt?: parameters["rowFilter.customers.insertedAt"];
          updatedAt?: parameters["rowFilter.customers.updatedAt"];
          username?: parameters["rowFilter.customers.username"];
          displayname?: parameters["rowFilter.customers.displayname"];
          pictureurl?: parameters["rowFilter.customers.pictureurl"];
          status?: parameters["rowFilter.customers.status"];
          owner?: parameters["rowFilter.customers.owner"];
          inflow?: parameters["rowFilter.customers.inflow"];
        };
        body: {
          /** customers */
          customers?: definitions["customers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/urls_cutomers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_cutomers.id"];
          created_at?: parameters["rowFilter.urls_cutomers.created_at"];
          customerId?: parameters["rowFilter.urls_cutomers.customerId"];
          urlId?: parameters["rowFilter.urls_cutomers.urlId"];
          clicks?: parameters["rowFilter.urls_cutomers.clicks"];
          owner?: parameters["rowFilter.urls_cutomers.owner"];
          updateAt?: parameters["rowFilter.urls_cutomers.updateAt"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["urls_cutomers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** urls_cutomers */
          urls_cutomers?: definitions["urls_cutomers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_cutomers.id"];
          created_at?: parameters["rowFilter.urls_cutomers.created_at"];
          customerId?: parameters["rowFilter.urls_cutomers.customerId"];
          urlId?: parameters["rowFilter.urls_cutomers.urlId"];
          clicks?: parameters["rowFilter.urls_cutomers.clicks"];
          owner?: parameters["rowFilter.urls_cutomers.owner"];
          updateAt?: parameters["rowFilter.urls_cutomers.updateAt"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls_cutomers.id"];
          created_at?: parameters["rowFilter.urls_cutomers.created_at"];
          customerId?: parameters["rowFilter.urls_cutomers.customerId"];
          urlId?: parameters["rowFilter.urls_cutomers.urlId"];
          clicks?: parameters["rowFilter.urls_cutomers.clicks"];
          owner?: parameters["rowFilter.urls_cutomers.owner"];
          updateAt?: parameters["rowFilter.urls_cutomers.updateAt"];
        };
        body: {
          /** urls_cutomers */
          urls_cutomers?: definitions["urls_cutomers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/urls": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls.id"];
          name?: parameters["rowFilter.urls.name"];
          createdAt?: parameters["rowFilter.urls.createdAt"];
          updatedAt?: parameters["rowFilter.urls.updatedAt"];
          clicks?: parameters["rowFilter.urls.clicks"];
          impression?: parameters["rowFilter.urls.impression"];
          owner?: parameters["rowFilter.urls.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["urls"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** urls */
          urls?: definitions["urls"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls.id"];
          name?: parameters["rowFilter.urls.name"];
          createdAt?: parameters["rowFilter.urls.createdAt"];
          updatedAt?: parameters["rowFilter.urls.updatedAt"];
          clicks?: parameters["rowFilter.urls.clicks"];
          impression?: parameters["rowFilter.urls.impression"];
          owner?: parameters["rowFilter.urls.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.urls.id"];
          name?: parameters["rowFilter.urls.name"];
          createdAt?: parameters["rowFilter.urls.createdAt"];
          updatedAt?: parameters["rowFilter.urls.updatedAt"];
          clicks?: parameters["rowFilter.urls.clicks"];
          impression?: parameters["rowFilter.urls.impression"];
          owner?: parameters["rowFilter.urls.owner"];
        };
        body: {
          /** urls */
          urls?: definitions["urls"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/customers_tags": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers_tags.id"];
          createdAt?: parameters["rowFilter.customers_tags.createdAt"];
          tagId?: parameters["rowFilter.customers_tags.tagId"];
          customerId?: parameters["rowFilter.customers_tags.customerId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["customers_tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** customers_tags */
          customers_tags?: definitions["customers_tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers_tags.id"];
          createdAt?: parameters["rowFilter.customers_tags.createdAt"];
          tagId?: parameters["rowFilter.customers_tags.tagId"];
          customerId?: parameters["rowFilter.customers_tags.customerId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers_tags.id"];
          createdAt?: parameters["rowFilter.customers_tags.createdAt"];
          tagId?: parameters["rowFilter.customers_tags.tagId"];
          customerId?: parameters["rowFilter.customers_tags.customerId"];
        };
        body: {
          /** customers_tags */
          customers_tags?: definitions["customers_tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/planet": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/countupurlsclicks": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/add_planet": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            name: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  talks: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    insertedAt: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
    /** Format: character varying */
    isType?: string;
    /** Format: character varying */
    messageType?: string;
    /** Format: character varying */
    messageId?: string;
    /** Format: character varying */
    messageText?: string;
    /** Format: character varying */
    webhookEventid?: string;
    /** Format: boolean */
    isRedelivery?: boolean;
    /** Format: character varying */
    isTimestamp?: string;
    /** Format: character varying */
    replyToken?: string;
    /** Format: character varying */
    isMode?: string;
    /**
     * Format: boolean
     * @description このメッセージに対して、返信したかどうか
     * @default false
     */
    isReply: boolean;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    userId: string;
  };
  OwnerInfomation: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    apiChannelId?: string;
    /** Format: text */
    liffChannelSecret?: string;
    /** Format: text */
    webhookUrl?: string;
    /** Format: text */
    liffId?: string;
    /** Format: text */
    liffChannelId?: string;
    /** Format: text */
    apiChannelSecret?: string;
    /** Format: text */
    apiChannelAccessToken?: string;
    /** Format: text */
    basicId?: string;
    /** Format: text */
    pictureUrl?: string;
    /** Format: text */
    liffAccessToken?: string;
    /**
     * Format: boolean
     * @default true
     */
    firstLogin: boolean;
  };
  urls_tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `urls.id`.<fk table='urls' column='id'/>
     */
    urlId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tags.id`.<fk table='tags' column='id'/>
     */
    tagId: string;
  };
  pushmessages: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    insertedAt: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
    /** Format: character varying */
    message?: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    toUser: string;
    /**
     * Format: character varying
     * @default pushmessage
     */
    isType: string;
  };
  tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    insertedAt: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
    /** Format: character varying */
    name: string;
    /** Format: uuid */
    owner: string;
  };
  customers: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    lineid: string;
    /** Format: character varying */
    phone?: string;
    /** Format: character varying */
    email?: string;
    /** Format: character varying */
    address?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    insertedAt?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt?: string;
    /** Format: character varying */
    username?: string;
    /** Format: character varying */
    displayname?: string;
    /** Format: text */
    pictureurl?: string;
    /**
     * Format: character varying
     * @default follow
     */
    status?: string;
    /** Format: uuid */
    owner: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tags.id`.<fk table='tags' column='id'/>
     */
    inflow?: string;
  };
  urls_cutomers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    customerId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `urls.id`.<fk table='urls' column='id'/>
     */
    urlId: string;
    /**
     * Format: integer
     * @default 0
     */
    clicks: number;
    /** Format: uuid */
    owner: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updateAt: string;
  };
  urls: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    createdAt: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updatedAt: string;
    /**
     * Format: integer
     * @default 0
     */
    clicks?: number;
    /**
     * Format: integer
     * @default 0
     */
    impression?: number;
    /** Format: uuid */
    owner: string;
  };
  customers_tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tags.id`.<fk table='tags' column='id'/>
     */
    tagId: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `customers.lineid`.<fk table='customers' column='lineid'/>
     */
    customerId: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description talks */
  "body.talks": definitions["talks"];
  /** Format: uuid */
  "rowFilter.talks.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.talks.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.talks.updatedAt": string;
  /** Format: character varying */
  "rowFilter.talks.isType": string;
  /** Format: character varying */
  "rowFilter.talks.messageType": string;
  /** Format: character varying */
  "rowFilter.talks.messageId": string;
  /** Format: character varying */
  "rowFilter.talks.messageText": string;
  /** Format: character varying */
  "rowFilter.talks.webhookEventid": string;
  /** Format: boolean */
  "rowFilter.talks.isRedelivery": string;
  /** Format: character varying */
  "rowFilter.talks.isTimestamp": string;
  /** Format: character varying */
  "rowFilter.talks.replyToken": string;
  /** Format: character varying */
  "rowFilter.talks.isMode": string;
  /**
   * Format: boolean
   * @description このメッセージに対して、返信したかどうか
   */
  "rowFilter.talks.isReply": string;
  /** Format: character varying */
  "rowFilter.talks.userId": string;
  /** @description OwnerInfomation */
  "body.OwnerInfomation": definitions["OwnerInfomation"];
  /** Format: uuid */
  "rowFilter.OwnerInfomation.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.OwnerInfomation.updatedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.OwnerInfomation.createdAt": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.name": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.apiChannelId": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.liffChannelSecret": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.webhookUrl": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.liffId": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.liffChannelId": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.apiChannelSecret": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.apiChannelAccessToken": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.basicId": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.pictureUrl": string;
  /** Format: text */
  "rowFilter.OwnerInfomation.liffAccessToken": string;
  /** Format: boolean */
  "rowFilter.OwnerInfomation.firstLogin": string;
  /** @description urls_tags */
  "body.urls_tags": definitions["urls_tags"];
  /** Format: uuid */
  "rowFilter.urls_tags.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.urls_tags.createdAt": string;
  /** Format: uuid */
  "rowFilter.urls_tags.urlId": string;
  /** Format: uuid */
  "rowFilter.urls_tags.tagId": string;
  /** @description pushmessages */
  "body.pushmessages": definitions["pushmessages"];
  /** Format: uuid */
  "rowFilter.pushmessages.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.pushmessages.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.pushmessages.updatedAt": string;
  /** Format: character varying */
  "rowFilter.pushmessages.message": string;
  /** Format: character varying */
  "rowFilter.pushmessages.toUser": string;
  /** Format: character varying */
  "rowFilter.pushmessages.isType": string;
  /** @description tags */
  "body.tags": definitions["tags"];
  /** Format: uuid */
  "rowFilter.tags.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.tags.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.tags.updatedAt": string;
  /** Format: character varying */
  "rowFilter.tags.name": string;
  /** Format: uuid */
  "rowFilter.tags.owner": string;
  /** @description customers */
  "body.customers": definitions["customers"];
  /** Format: character varying */
  "rowFilter.customers.lineid": string;
  /** Format: character varying */
  "rowFilter.customers.phone": string;
  /** Format: character varying */
  "rowFilter.customers.email": string;
  /** Format: character varying */
  "rowFilter.customers.address": string;
  /** Format: timestamp with time zone */
  "rowFilter.customers.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.customers.updatedAt": string;
  /** Format: character varying */
  "rowFilter.customers.username": string;
  /** Format: character varying */
  "rowFilter.customers.displayname": string;
  /** Format: text */
  "rowFilter.customers.pictureurl": string;
  /** Format: character varying */
  "rowFilter.customers.status": string;
  /** Format: uuid */
  "rowFilter.customers.owner": string;
  /** Format: uuid */
  "rowFilter.customers.inflow": string;
  /** @description urls_cutomers */
  "body.urls_cutomers": definitions["urls_cutomers"];
  /** Format: uuid */
  "rowFilter.urls_cutomers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.urls_cutomers.created_at": string;
  /** Format: character varying */
  "rowFilter.urls_cutomers.customerId": string;
  /** Format: uuid */
  "rowFilter.urls_cutomers.urlId": string;
  /** Format: integer */
  "rowFilter.urls_cutomers.clicks": string;
  /** Format: uuid */
  "rowFilter.urls_cutomers.owner": string;
  /** Format: timestamp with time zone */
  "rowFilter.urls_cutomers.updateAt": string;
  /** @description urls */
  "body.urls": definitions["urls"];
  /** Format: uuid */
  "rowFilter.urls.id": string;
  /** Format: character varying */
  "rowFilter.urls.name": string;
  /** Format: timestamp with time zone */
  "rowFilter.urls.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.urls.updatedAt": string;
  /** Format: integer */
  "rowFilter.urls.clicks": string;
  /** Format: integer */
  "rowFilter.urls.impression": string;
  /** Format: uuid */
  "rowFilter.urls.owner": string;
  /** @description customers_tags */
  "body.customers_tags": definitions["customers_tags"];
  /** Format: uuid */
  "rowFilter.customers_tags.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.customers_tags.createdAt": string;
  /** Format: uuid */
  "rowFilter.customers_tags.tagId": string;
  /** Format: character varying */
  "rowFilter.customers_tags.customerId": string;
}

export interface operations {}

export interface external {}
